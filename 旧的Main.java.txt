import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.ArrayDeque;

class Config {
    public static final int N = 10; // 最大顶点数
    public static final int INF = 99999; // 极大值
    public static final int MAX_TIME = 10; // 最大模拟时间（次数）
}

public class Main1 {
    public static void main(String[] args) throws IOException {
        boolean[][] isFull = new boolean[Config.N][Config.N];
        AGV agv1 = new AGV();
        AGV agv2 = new AGV();
        int TIME = 1;
        for (int i = 0; i < Config.N; ++i) {
            for (int j = 0; j < Config.N; ++j) {
                isFull[i][j] = false;
            }
        }
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        while (true) {
            System.out.println("第 " + TIME + "s");
            if (agv1.checkIsFree) {
                String choice;
                System.out.println("是否有任务给1号车(yN)");
                try {
                    choice = bufferedReader.readLine().trim();
                    if (choice.equalsIgnoreCase("y")) {
                        agv1.agvMap = new Map();
                        agv1.agvMap.solve();
                        agv1.setStart(isFull, TIME);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    choice = null;
                }
            }
            if (agv2.checkIsFree) {
                String choice;
                System.out.println("是否有任务给2号车(yN)");
                try {
                    choice = bufferedReader.readLine().trim();
                    if (choice.equalsIgnoreCase("y")) {
                        agv2.agvMap = new Map();
                        agv2.agvMap.solve();
                        agv2.setStart(isFull, TIME);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    choice = null;
                }
            }
            System.out.print("A:");
            agv1.move();
            System.out.print("B:");
            agv2.move();
            TIME++;
            if (TIME == Config.MAX_TIME) {
                bufferedReader.close();
                System.exit(0);
            }
        }
    }
}

class Pair {
    /**
     * CLASS: Pair
     */
    private final int first;
    private final int second;

    public Pair(int a, int b) {
        this.first = a;
        this.second = b;
    }

    public int getFirst() {
        return first;
    }

    public int getSecond() {
        return second;
    }
}

class Edge {
    public int to; // 边终止节点
    public int cost; // 花费

    Edge(int _to, int _cost) {
        this.to = _to;
        this.cost = _cost;
    }
}

class Ans {
    public ArrayList<Integer> path = new ArrayList<>();
    public int cost;
    public int start;

    public void getCost() {
        cost = Map.G1[start][path.get(0)];
        for (int i = 0; i < path.size() - 1; ++i) {
            cost += Map.G1[path.get(i)][path.get(i + 1)];
        }
    }
}

class Map {
    public static int[][] G1 = new int[Config.N][Config.N];
    public int startPoint;
    public int turnMin;
    public ArrayList<Ans> paths = new ArrayList<>();
    public int[] dist = new int[Config.N];
    public int nV; // Vertex顶点数
    public int nE; // Edge边数
    public ArrayList<Edge>[] G = new ArrayList[Config.N];
    public ArrayList<Edge>[] G4 = new ArrayList[Config.N];
    public boolean[] vis = new boolean[Config.N];

    public Map() {
        for (int i = 0; i < Config.N; ++i) {
            G[i] = new ArrayList<Edge>();
            G4[i] = new ArrayList<Edge>();
        }
    }

    public void addEdge(int from, int to, int cost, ArrayList<Edge>[] G) {
        Edge e = new Edge(to, cost);
        G[from].add(e);

        Edge e1 = new Edge(from, cost);
        G[to].add(e1);
    }

    public void build() {
        File file = new File("data.txt");
        BufferedReader bReader;
        try {
            bReader = new BufferedReader(new FileReader(file));
            this.nV = Integer.parseInt(bReader.readLine().trim()); // 读取顶点数
            this.nE = Integer.parseInt(bReader.readLine().trim()); // 读取边数
            bReader.close();
        } catch (Exception e) {
            e.printStackTrace();
            return;
        }

        for (int i = 0; i < nV; ++i) {
            for (int j = i; j < nV; ++j) {
                Map.G1[i][j] = Map.G1[j][i] = Config.INF;
            }
        }
        int from, to, cost;
        try {
            bReader = new BufferedReader(new FileReader(file));
            bReader.readLine();// 忽略顶点数
            bReader.readLine();// 忽略边数
            for (int i = 0; i < nE; ++i) {
                String[] fileLine = bReader.readLine().trim().split(" ");
                from = Integer.parseInt(fileLine[0]); // 读取起点
                to = Integer.parseInt(fileLine[1]); // 读取终点
                cost = Integer.parseInt(fileLine[2]);// 读取边权
                addEdge(from, to, cost, G);
                Map.G1[from][to] = Map.G1[to][from] = cost;
            }
            bReader.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void Dijkstra(int s, ArrayList<Edge>[] G) {
        for (int i = 0; i < nV + 1; ++i) {
            dist[i] = Config.INF;
        }
        Queue<Pair> q = new PriorityQueue<>((a, b) -> b.getFirst() - a.getFirst());
        dist[s] = 0;
        q.offer(new Pair(0, s));
        while (!q.isEmpty()) {
            Pair p = q.poll();
            int v = p.getSecond();
            if (dist[v] < p.getFirst())
                continue;
            for (int i = 0; i < G[v].size(); ++i) {
                Edge e = G[v].get(i);
                int dists = dist[v] + e.cost;
                if (dist[e.to] > dists) {
                    dist[e.to] = dist[v] + e.cost;
                    q.offer(new Pair(dist[e.to], e.to));
                    G4[v].add(e);
                } else if (dist[e.to] == dists) {
                    G4[v].add(e);
                }
            }
        }
    }

    public void dfs(int s, int t, Ans A, List<Ans> paths, int start) {
        if (s == t) {
            A.start = start;
            A.getCost();
            paths.add(A);
        }

        for (int i = 0; i < G4[s].size(); ++i) {
            int u = G4[s].get(i).to;
            if (!vis[u]) {
                vis[u] = true;
                A.path.add(u);
                dfs(s, t, A, paths, start);
                A.path.remove(A.path.size() - 1);
                vis[u] = false;
            }
        }
    }

    public void solve() {
        int start_point = -1, final_point = -1;
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        System.out.println("输入起点：");
        try {
            start_point = Integer.parseInt(bufferedReader.readLine().trim());
        } catch (IOException e) {
            System.out.println("Input error!");
        } catch (NumberFormatException e) {
            System.out.println("Not a number!");
        }
        System.out.println("输入终点：");
        try {
            final_point = Integer.parseInt(bufferedReader.readLine().trim());
        } catch (IOException e) {
            System.out.println("Input error!");
        } catch (NumberFormatException e) {
            System.out.println("Not a number!");
        }
        if (start_point == -1 || final_point == -1) {
            System.out.println("Input error!");
            return;
        }

        build();
        Dijkstra(start_point, G);
        int i, j;
        Ans ans = new Ans();
        for (i = 0; i < Config.N; ++i) {
            vis[i] = false;
        }
        dfs(start_point, final_point, ans, paths, start_point);

        System.out.println(start_point + " 到 " + final_point + " 的所有最短路径：");
        int tsize = paths.size();
        int[] t = new int[tsize];
        for (i = 0; i < paths.size(); ++i) {
            t[i] = 0;
            System.out.print(start_point + " - ");
            for (j = 0; j < paths.size(); ++j) {
                System.out.print(paths.get(i).path.get(j) + " - ");
                if (j > 1 &&
                        Math.abs(paths.get(i).path.get(j) - paths.get(i).path.get(j - 2)) != 22 &&
                        Math.abs(paths.get(i).path.get(j) - paths.get(i).path.get(j - 2)) != 2) {
                    t[i] += 1;
                } else if (j == 1 && Math.abs(paths.get(i).path.get(j) - start_point) != 22 &&
                        Math.abs(paths.get(i).path.get(i) - start_point) != 2) {
                    t[i] += 1;
                }
            }
            System.out.println("---cost: " + paths.get(i).cost + " - 转弯数：" + t[i] + "\n");
        }
        turnMin = 1000;
        for (i = 0; i < paths.size(); ++i) {
            if (turnMin > t[i])
                turnMin = t[i];
        }
        System.out.println("最优路径为：");
        for (i = 0; i < paths.size(); ++i) {
            if (t[i] == turnMin) {
                System.out.print(start_point + " - ");
                for (j = 0; j < paths.get(i).path.size(); ++j) {
                    System.out.print(paths.get(i).path.get(j) + " - ");
                }
                System.out.println("---cost: " + paths.get(i).cost + " - 转弯数：" + turnMin);
            }
        }
        System.out.println("次优路径为：");
        for (i = 0; i < paths.size(); i++) {
            if (t[i] == turnMin + 1) {
                System.out.print(start_point + " - ");
                for (j = 0; j < paths.get(i).path.size(); j++) {
                    System.out.print(paths.get(i).path.get(j) + " - ");
                }
                System.out.println("---cost: " + paths.get(i).cost + " - 转弯数：" + turnMin);
            }
        }
    }
}

class AGV {
    public Map agvMap;
    public int next_point;
    public int this_point;
    public boolean checkIsFree = true;
    public Queue<Integer> agvPath = new ArrayDeque<>();
    public int i = 0;

    AGV() {
        agvMap = null;
    }

    public void setStart(boolean[][] isFull, int t) {
        System.out.println("[INFO] set Start");
        checkIsFree = false;
        next_point = agvMap.startPoint;
        int time = t;
        // 通过换路径防止碰撞
        for (int k = 0; k < agvMap.paths.size(); ++k) {
            for (int j = 0; j < agvMap.paths.get(k).path.size(); ++j) {
                if (isFull[agvMap.paths.get(k).path.get(j)][time]) {
                    System.out.println("已被占用的节点 " + agvMap.paths.get(k).path.get(j) +
                            "---第 " + time + "s");
                    while (!agvPath.isEmpty())
                        System.out.println("删除尾节点：" + agvPath.poll());
                    for (int l = j - 1; l >= 0; --l) {
                        System.out.println("释放占用节点");
                        isFull[agvMap.paths.get(k).path.get(j)][time] = false;
                        --time;
                    }
                    if (j == 0)
                        time = t;
                    break;
                }
                agvPath.offer(agvMap.paths.get(k).path.get(j));
                isFull[agvMap.paths.get(k).path.get(j)][time] = true;
                System.out.println("成功占用节点：" + agvMap.paths.get(k).path.get(j) + "---第 " + time + "s");
                ++time;
            }
            if (!agvPath.isEmpty())
                break;
        }
        // 通过碰撞前停止防止碰撞
        if (agvPath.isEmpty()) {
            for (int j = 0; j < agvMap.paths.get(0).path.size(); ++j) {
                if (isFull[agvMap.paths.get(0).path.get(j)][time]) {
                    --j;
                    agvPath.offer(agvMap.paths.get(0).path.get(j));
                    isFull[agvMap.paths.get(0).path.get(j)][time] = true;
                    ++time;
                    continue;
                }
                agvPath.offer(agvMap.paths.get(0).path.get(j));
                isFull[agvMap.paths.get(0).path.get(j)][time] = true;
                ++time;
            }
        }
        i = 0;
    }

    public void move() {
        if (checkIsFree)
            next_point = this_point;
        else {
            this_point = next_point;
            if (i != 1) {
                next_point = agvPath.poll();
            }
        }
        if (agvPath.isEmpty()) {
            if (i == 1) {
                checkIsFree = true;
                i = 0;
                agvMap = null;
            }
            ++i;
        }
        System.out.println(this_point);
    }
}